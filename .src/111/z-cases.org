#+TITLE: 一万行代码



* 个税计算器 (简化版) [[id:6c800397-9525-4a5d-b857-4356fb81f85c][源]]
** 原始版本

这是第二小组提供的代码:

#+begin_src csharp -n
  using System;

  namespace Tax
  {
      class Program
      {
          static void Main(string[] args)
          {
              double a = 0.03;
              double b = 0.05;
              double c = 0.2;
              double d = 0.45;
              double n;
              if (args.Length != 1 || !double.TryParse(args[0], out n))
              {
                  Console.WriteLine("去输入正确的格式：Tax 税前收入");
                  return;
              }
              else if (n < 5000)
              {
                  double tax1 = n;
                  Console.WriteLine($"税前收入：{n,10:c}");
                  Console.WriteLine($"应交税/税率：{0,10:c}({0:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n:c}");
              }
              else if (n < 10000)
              {
                  double tax2 = (n - 5000) * a;
                  Console.WriteLine($"税前收入：{n, 10:c}");
                  Console.WriteLine($"应交税/税率：{tax2,10:c}({a:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n - tax2:c}");
              }
              else if (n < 20000)
              {
                  double tax3 = (n - 10000) * b + 5000 * a;
                  Console.WriteLine($"税前收入：{n,10:c}");
                  Console.WriteLine($"应交税/税率：{tax3,10:c}({b:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n - tax3:c}");
              }
              else if (n < 100000)
              {
                  double tax4 = (n - 20000) * c + 10000 * b + 5000 * a;
                  Console.WriteLine($"税前收入：{n,10:c}");
                  Console.WriteLine($"应交税/税率：{tax4,10:c}({c:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n - tax4:c}");
              }

              else if (n > 100000)
              {
                  double tax6 = (n - 100000) * d + 80000 * c + 10000 * b + 5000 * a;
                  Console.WriteLine($"税前收入：{n,   10:c}");
                  Console.WriteLine($"应交税/税率：{tax6,10:c}({d:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n - tax6:c}");
              }
          }
      }
  }
#+end_src

** 原始版本的批注

#+begin_src csharp
  namespace Tax
  {
      class Program
      {
          static void Main(string[] args)
          {
              // 变量的命名不要太随意!
              double a = 0.03;
              double b = 0.05;
              double c = 0.2;
              double d = 0.45;

              double n; // 税前收入

              if (args.Length != 1 || !double.TryParse(args[0], out n))
              {
                  Console.WriteLine("去输入正确的格式：Tax 应发工资");
                  return;
              }
              // else 没有必要
              else if (n < 5000)
              {
                  double tax1 = n; // 此变量的意义? 代码混淆
                  Console.WriteLine($"应发工资：{n,10:c}");
                  Console.WriteLine($"应交税/税率：{0,10:c}({0:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n:c}");
              }
              else if (n < 10000) // 隐藏意思 1w > n >= 5k
              {
                  double tax2 = (n - 5000) * a; // 读到这里，才知晓 a 表示税率
                  Console.WriteLine($"应发工资：{n,10:c}");
                  Console.WriteLine($"应交税/税率：{tax2,10:c}({a:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n - tax2:c}");
              }
              else if (n < 20000)
              {
                  // 一定要善于模仿、山寨、抄袭，总之 C-c/C-v
                  // 模仿并不可耻，可耻的是，长年累月，没有任何进步
                  double tax3 = (n - 10000) * b + 5000 * a;
                  Console.WriteLine($"应发工资：{n,10:c}");
                  Console.WriteLine($"应交税/税率：{tax3,10:c}({b:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n - tax3:c}");
              }
              else if (n < 100000)
              {
                  double tax4 = (n - 20000) * c + 10000 * b + 5000 * a;
                  Console.WriteLine($"应发工资：{n,10:c}");
                  Console.WriteLine($"应交税/税率：{tax4,10:c}({c:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n - tax4:c}");
              }
              else if (n > 100000)
              {
                  // 冗余代码太多了，没必要的冗余会导致:
                  // - 开发起来，花费时间太多
                  // - 阅读起来，不是那么友好
                  // - 维护起来，越来越麻烦 (shi山)
                  double tax6 = (n - 100000) * d + 80000 * c + 10000 * b + 5000 * a;
                  Console.WriteLine($"应发工资：{n,10:c}");
                  Console.WriteLine($"应交税/税率：{tax6,10:c}({d:p})");
                  Console.WriteLine("".PadRight(30, '-'));
                  Console.WriteLine($"实发工资：{n - tax6:c}");
              }
          }
      }
  }
#+end_src

** 第四组优化版

#+begin_src csharp
  using System;

  // 命名要规范 ≠ 命名必须使用英文
  // 没必要因为英文失去了编程的信心
  // 如果能力可以，使用英文是推荐的，但是如果有些吃力，拼音也可以啊
  // 意思是: 如果能穿品牌出去自然好，但是没钱的话，干干净净也不丢人

  // 写代码，最重要的是有思路，也就是知道自己要做什么
  // 我们要做的事情是: 计算税后收入
  // - 第一步，接收税前收入的金额
  // - 第二步，按照 [ 税收 = 税前收入 * 恰当的税率 ] 的方式计算税率
  // - 第三步，通过 [ 税后收入 = 税前收入 - 税收 ] 的方式计算税后收入
  // - 最后，花样输出

  namespace Tax
  {
      class Program
      {
          static void Main(string[] args)
          {
              double slv;   //税率
              double ynsk;  //应纳税款
              double gongzi; //工资

              if (args.Length != 1 || !double.TryParse(args[0], out gongzi))
              {
                  Console.WriteLine("去输入正确的格式：Tax 税前收入");
                  return;
              }

              if (gongzi < 10000)
              {
                  slv = 0.03;
                  ynsk = (gongzi - 5000) * slv;
              }
              else if (gongzi < 20000)
              {
                  slv = 0.05;
                  ynsk = (gongzi - 5000) * slv;
              }
              else if (gongzi < 100000)
              {
                  slv = 0.2;
                  ynsk = (gongzi - 5000) * slv;
              }
              else
              {
                  slv = 0.45;
                  ynsk = (gongzi - 5000) * slv;
              }

              Console.WriteLine();
              Console.WriteLine($"税前收入：{gongzi,5:c}");
              Console.WriteLine($"应交税/税率：{ynsk,5:c}({slv:p})");
              Console.WriteLine("".PadRight(30, '-'));
              Console.WriteLine($"税后工资：{ gongzi - ynsk,5:c}");
          }
      }
  }

#+end_src

** *分离* 计算跟输出，优化代码结构

[[file:img/tax-cal.png]]


** 通过 *方法* 对逻辑进行提取

将某些代码块单独 *分离* 出来，并用一个名字代表，这就是所谓的方法。
在原先执行代码块的地方，使用这个名字代替，这就是方法调用。
通过这种方法调用方式，将程序变成了结构式的了，方便了重用和维护。

#+begin_src csharp
  using System;

  namespace Tax
  {
      class Program
      {
          static void Main(string[] args)
          {
              // 1. 接收参数
              double money;
              if (args.Length != 1 || !double.TryParse(args[0], out money))
              {
                  Console.WriteLine("您的输入有误，正确的调用方法是:\nTaxCalculator 税前收入");
                  return;
              }

              // 2. 按照接收的参数进行计算
              double[] result = CalculateTax(money);

              // 3. 对结果进行输出
              PrintToConsole(money, result[0], result[1]);

          }
          static double[] CalculateTax(double money)
          {
              double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
              double rate, tax;
              if (money <= 5000)
              {
                  rate = 0;
                  tax = 0;
              }
              else if (money < 10000)
              {
                  rate = rates[0];
                  tax = (money - 5000) * rate;
              }
              else if (money < 20000)
              {
                  rate = rates[1];
                  tax = (money - 10000) * rate + 5000 * rates[0];
              }
              else if (money < 100000)
              {
                  rate = rates[2];
                  tax = (money - 20000) * rate + 10000 * rates[1] + 5000 * rates[0];
              }
              else
              {
                  rate = rates[3];
                  tax = (money - 100000) * rate + 80000 * rates[2] + 10000 * rates[1] + 5000 * rates[0];
              }
              return new double[] { rate, tax };
          }
          static void PrintToConsole(double money, double rate, double tax)
          {
              Console.WriteLine();
              Console.WriteLine($"税前收入: {money,10:C}");
              Console.WriteLine($"应付税收: {tax,10:C} ({rate:P1})");
              Console.WriteLine("".PadRight(30, '┈'));
              Console.WriteLine($"税后收入: {money - tax,10:C}");
          }
      }
  }
#+end_src

** 通过 *类* 对代码逻辑进行进一步分离

方法越来越多，需要按照功能进行分门别类。这样就更具备组织性了。

#+begin_src csharp
  using System;

  class Program
  {
      static void Main(string[] args)
      {
          // 1. 接收参数
          double money;
          if (args.Length != 1 || !double.TryParse(args[0], out money))
          {
              Console.WriteLine("您的输入有误，正确的调用方法是:\nTaxCalculator 税前收入");
              return;
          }

          // 税收的计算
          double[] result = TaxCal.CalculateTax(money);
          TaxCal.PrintToConsole(money, result[0], result[1]);
          TaxCal.ExportToExcel(money, result[0], result[1]);
      }
  }

  class TaxCal
  {
      static public double[] CalculateTax(double money)
      {
          double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
          double rate, tax;
          if (money <= 5000)
          {
              rate = 0;
              tax = 0;
          }
          else if (money < 10000)
          {
              rate = rates[0];
              tax = (money - 5000) * rate;
          }
          else if (money < 20000)
          {
              rate = rates[1];
              tax = (money - 10000) * rate + 5000 * rates[0];
          }
          else if (money < 100000)
          {
              rate = rates[2];
              tax = (money - 20000) * rate + 10000 * rates[1] + 5000 * rates[0];
          }
          else
          {
              rate = rates[3];
              tax = (money - 100000) * rate + 80000 * rates[2] + 10000 * rates[1] + 5000 * rates[0];
          }
          return new double[] {rate, tax};
      }
      static public void PrintToConsole(double money, double rate, double tax)
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {money,10:C}");
          Console.WriteLine($"应付税收: {tax,10:C} ({rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {money - tax,10:C}");
      }
      static public void ExportToExcel(double money, double rate, double tax)
      {
          Console.WriteLine();
          Console.WriteLine($"Excel输出税前收入: {money,10:C}");
          Console.WriteLine($"Excel输出应付税收: {tax,10:C} ({rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"Excel输出税后收入: {money - tax,10:C}");
      }
  }

  class TipCalculator { ... }
  class PowerFeeCalculator { ... }
#+end_src

** 让类中的各个方法，能 *共享数据*

在类中定义变量缓存每次方法调用的中间结果，下一个方法调用也可以直接使用这些缓存的结果。
这样，方法调用间就产生了关联，调用的时候不需要传递那么多参数。

#+begin_src csharp
  using System;

  class Program
  {
      static void Main(string[] args)
      {
          // 1. 接收参数
          double money;
          if (args.Length != 1 || !double.TryParse(args[0], out money))
          {
              Console.WriteLine("您的输入有误，正确的调用方法是:\nTaxCalculator 税前收入");
              return;
          }

          // 税收的计算
          TaxCal.money = money;
          TaxCal.CalculateTax();
          TaxCal.PrintToConsole();
          TaxCal.ExportToExcel();

          TaxCal.money = 23232;
          TaxCal.CalculateTax();
          TaxCal.PrintToConsole();
      }
  }

  class TaxCal
  {
      static public double money;
      static private double rate;
      static private double tax;

      static public void CalculateTax()
      {
          double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
          //double rate, tax;
          if (money <= 5000)
          {
              rate = 0;
              tax = 0;
          }
          else if (money < 10000)
          {
              rate = rates[0];
              tax = (money - 5000) * rate;
          }
          else if (money < 20000)
          {
              rate = rates[1];
              tax = (money - 10000) * rate + 5000 * rates[0];
          }
          else if (money < 100000)
          {
              rate = rates[2];
              tax = (money - 20000) * rate + 10000 * rates[1] + 5000 * rates[0];
          }
          else
          {
              rate = rates[3];
              tax = (money - 100000) * rate + 80000 * rates[2] + 10000 * rates[1] + 5000 * rates[0];
          }
      }
      static public void PrintToConsole()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {money,10:C}");
          Console.WriteLine($"应付税收: {tax,10:C} ({rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {money - tax,10:C}");
      }
      static public void ExportToExcel()
      {
          Console.WriteLine();
          Console.WriteLine($"Excel输出税前收入: {money,10:C}");
          Console.WriteLine($"Excel输出应付税收: {tax,10:C} ({rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"Excel输出税后收入: {money - tax,10:C}");
      }
  }
#+end_src

** 引入 *对象* 保证调用的数据安全

引入独立的存储空间，将方法共享的数据进行隔离:

#+ATTR_HTML: :width 400
[[file:img/tax-cal3.png]]

#+begin_src csharp
  using System;

  class Program
  {
      static void Main(string[] args)
      {
          // 1. 接收参数
          double money;
          if (args.Length != 1 || !double.TryParse(args[0], out money))
          {
              Console.WriteLine("您的输入有误，正确的调用方法是:\nTaxCalculator 税前收入");
              return;
          }

          TaxCal tc1 = new TaxCal();
          tc1.money = money;
          tc1.CalculateTax();
          tc1.PrintToConsole();

          TaxCal tc2 = new TaxCal();
          tc2.money = 33333;
          tc2.CalculateTax();
          tc2.ExportToExcel();

          tc1.ExportToExcel();
      }
  }

  class TaxCal
  {
      public double money;
      private double rate;
      private double tax;

      public void CalculateTax()
      {
          double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
          if (money <= 5000)
          {
              rate = 0;
              tax = 0;
          }
          else if (money < 10000)
          {
              rate = rates[0];
              tax = (money - 5000) * rate;
          }
          else if (money < 20000)
          {
              rate = rates[1];
              tax = (money - 10000) * rate + 5000 * rates[0];
          }
          else if (money < 100000)
          {
              rate = rates[2];
              tax = (money - 20000) * rate + 10000 * rates[1] + 5000 * rates[0];
          }
          else
          {
              rate = rates[3];
              tax = (money - 100000) * rate + 80000 * rates[2] + 10000 * rates[1] + 5000 * rates[0];
          }
      }
      public void PrintToConsole()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {money,10:C}");
          Console.WriteLine($"应付税收: {tax,10:C} ({rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {money - tax,10:C}");
      }
      public void ExportToExcel()
      {
          Console.WriteLine();
          Console.WriteLine($"Excel输出税前收入: {money,10:C}");
          Console.WriteLine($"Excel输出应付税收: {tax,10:C} ({rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"Excel输出税后收入: {money - tax,10:C}");
      }
  }
#+end_src

** 通过 [private Field + public Method] 的方式，*保护数据* 安全

面向对象的数据的封装 (数据的安全):
- 对象是按照类的模板创建的包含了若干数据的一段存储空间
- 后续的方法调用都是基于对象的这片存储空间的
- 因此，我们需要通过一定手段对对象里的数据进行相关的访问保护
- 通用手段是提供了 private/public/protected 访问权限修饰符
  + 如果修饰为 private 的话，那么字段的数据从外部是禁止访问的 (不读、不写)
  + 如果修饰为 public 的话，那么字段的数据从外部是可以无限制访问的 (读、写)
  + 默认的修饰符为 private，也就是如果不添加任何修饰符的话，默认是不读、不写
- 当然，有时候，我们需要对一些数据或方法有特殊的要求，比如只读或只写:
  + 只读: 1) 将字段设置为 private 2) 创建一个 public 的方法，这个方法能够间接返回字段的值
  + 只写: 1) 将字段设置为 private 2) 创建一个 public 的方法，在这个方法中可以为字段赋值
  + 可控的读跟写: 1) 将字段设为 private 2) 创建两个方法，一个用来读 (Get)，一个用来写 (Set)

#+ATTR_HTML: :width 400
[[file:img/tax-cal2.png]]


于是，上述的这种模式，*private 字段 + public 方法*，成为了一种标准的编程实践:

#+begin_src csharp
  using System;

  class Program
  {
      static void Main(string[] args)
      {
          double money;
          if (args.Length != 1 || !double.TryParse(args[0], out money))
          {
              Console.WriteLine("您的输入有误，正确的调用方法是:\nTaxCalculator 税前收入");
              return;
          }

          TaxCal tc1 = new TaxCal();
          tc1.SetMoney(8000);
          Console.WriteLine(tc1.GetMoney());

          tc1.PrintToConsole();
          tc1.ExportToExcel();
          tc1.SetMoney(333333333);
          Console.WriteLine(">>> {0}", tc1.GetRate());
      }
  }

  class TaxCal
  {
      private double Money;
      private double Rate;
      private double Tax;

      public double GetMoney()
      {
          return Money;
      }
      public void SetMoney(double duoshao)
      {
          if (duoshao < 0)
          {
              Console.WriteLine("\n参数输入格式不正确！");
              Environment.Exit(0);
          }
          Money = duoshao;
      }
      public double GetTax()
      {
          CalculateTax();
          return Tax;
      }
      public double GetRate()
      {
          CalculateTax();
          return Rate;
      }

      public void CalculateTax()
      {
          double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
          if (Money <= 5000)
          {
              Rate = 0;
              Tax = 0;
          }
          else if (Money < 10000)
          {
              Rate = rates[0];
              Tax = (Money - 5000) * Rate;
          }
          else if (Money < 20000)
          {
              Rate = rates[1];
              Tax = (Money - 10000) * Rate + 5000 * rates[0];
          }
          else if (Money < 100000)
          {
              Rate = rates[2];
              Tax = (Money - 20000) * Rate + 10000 * rates[1] + 5000 * rates[0];
          }
          else
          {
              Rate = rates[3];
              Tax = (Money - 100000) * Rate + 80000 * rates[2] + 10000 * rates[1] + 5000 * rates[0];
          }
      }
      public void PrintToConsole()
      {
          CalculateTax();
          Console.WriteLine();
          Console.WriteLine($"税前收入: {Money,10:C}");
          Console.WriteLine($"应付税收: {Tax,10:C} ({Rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {Money - Tax,10:C}");
      }
      public void ExportToExcel()
      {
          CalculateTax();
          Console.WriteLine();
          Console.WriteLine($"Excel输出税前收入: {Money,10:C}");
          Console.WriteLine($"Excel输出应付税收: {Tax,10:C} ({Rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"Excel输出税后收入: {Money - Tax,10:C}");
      }
  }
#+end_src

** 减少代码冗余，*Lazy* and *Eager*

#+begin_src csharp
  class Program
  {
      static void Main(string[] args)
      {
          double money;
          if (args.Length != 1 || !double.TryParse(args[0], out money))
          {
              Console.WriteLine("您的输入有误，正确的调用方法是:\nTaxCalculator 税前收入");
              return;
          }

          TaxCal tc1 = new TaxCal();
          tc1.SetMoney(money);
          Console.WriteLine(tc1.GetTax());
          tc1.PrintToConsole();
      }
  }
#+end_src

#+begin_src csharp
  class TaxCal
  {
      private double Money;
      private double Rate;
      private double Tax;

      public double GetMoney()
      {
          return Money;
      }
      public void SetMoney(double duoshao)
      {
          if (duoshao < 0)
          {
              Console.WriteLine("\n参数输入格式不正确！");
              Environment.Exit(0);
          }
          Money = duoshao;
          CalculateTax(); // 更新对象中的 Tax 和 Rate
      }
      public double GetRate()
      {
          return Rate;
      }
      public double GetTax()
      {
          return Tax;
      }

      public void CalculateTax()
      {
          double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
          if (Money <= 5000)
          {
              Rate = 0;
              Tax = 0;
          }
          else if (Money < 10000)
          {
              Rate = rates[0];
              Tax = (Money - 5000) * Rate;
          }
          else if (Money < 20000)
          {
              Rate = rates[1];
              Tax = (Money - 10000) * Rate + 5000 * rates[0];
          }
          else if (Money < 100000)
          {
              Rate = rates[2];
              Tax = (Money - 20000) * Rate + 10000 * rates[1] + 5000 * rates[0];
          }
          else
          {
              Rate = rates[3];
              Tax = (Money - 100000) * Rate + 80000 * rates[2] + 10000 * rates[1] + 5000 * rates[0];
          }
      }
      public void PrintToConsole()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {Money,10:C}");
          Console.WriteLine($"应付税收: {Tax,10:C} ({Rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {Money - Tax,10:C}");
      }
      public void ExportToExcel()
      {
          Console.WriteLine();
          Console.WriteLine($"Excel输出税前收入: {Money,10:C}");
          Console.WriteLine($"Excel输出应付税收: {Tax,10:C} ({Rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"Excel输出税后收入: {Money - Tax,10:C}");
      }
  }
#+end_src

#+begin_src csharp
  class TaxCalLazy
  {
      private double Money;

      public double GetMoney()
      {
          return Money;
      }
      public void SetMoney(double duoshao)
      {
          if (duoshao < 0)
          {
              Console.WriteLine("\n参数输入格式不正确！");
              Environment.Exit(0);
          }
          Money = duoshao;
      }

      public double GetTax()
      {
          double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
          if (Money <= 5000)
          {
              return 0;
          }
          else if (Money < 10000)
          {
              return (Money - 5000) * rates[0];
          }
          else if (Money < 20000)
          {
              return (Money - 10000) * rates[1] + 5000 * rates[0];
          }
          else if (Money < 100000)
          {
              return (Money - 20000) * rates[2] + 10000 * rates[1] + 5000 * rates[0];
          }
          else
          {
              return (Money - 100000) * rates[3] + 80000 * rates[2] + 10000 * rates[1] + 5000 * rates[0];
          }
      }
      public double GetRate()
      {
          double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
          if (Money <= 5000)
          {
              return 0;
          }
          else if (Money < 10000)
          {
              return rates[0];
          }
          else if (Money < 20000)
          {
              return rates[1];
          }
          else if (Money < 100000)
          {
              return rates[2];
          }
          else
          {
              return rates[3];
          }
      }

      public void PrintToConsole()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {Money,10:C}");
          Console.WriteLine($"应付税收: {GetTax(),10:C} ({GetRate():P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {Money - GetTax(),10:C}");
      }
      public void ExportToExcel()
      {
          Console.WriteLine();
          Console.WriteLine($"Excel输出税前收入: {Money,10:C}");
          Console.WriteLine($"Excel输出应付税收: {GetTax(),10:C} ({GetRate():P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"Excel输出税后收入: {Money - GetTax(),10:C}");
      }
  }
#+end_src

** 来自语法糖的力量: 通过 *Property* 简化代码
*** Eager Version

#+begin_div :class mc11

#+begin_src csharp
  class TaxCal
  {
      private double Money;
      private double Rate;
      private double Tax;

      public double GetMoney()
      {
          return Money;
      }
      public void SetMoney(double duoshao)
      {
          if (duoshao < 0)
          {
              Console.WriteLine("\n参数输入格式不正确！");
              Environment.Exit(0);
          }
          Money = duoshao;
          CalculateTax(); // 更新对象中的 Tax 和 Rate
      }
      public double GetRate()
      {
          return Rate;
      }
      public double GetTax()
      {
          return Tax;
      }

      public void CalculateTax()
      {
          double[] rates = new double[]{0.03, 0.05, 0.2, 0.45};
          if (Money <= 5000)
          {
              Rate = 0;
              Tax = 0;
          }
          else if (Money < 10000)
          {
              Rate = rates[0];
              Tax = (Money - 5000) * Rate;
          }
          else if (Money < 20000)
          {
              Rate = rates[1];
              Tax = (Money - 10000) * Rate ...;
          }
          else if (Money < 100000)
          {
              Rate = rates[2];
              Tax = (Money - 20000) * Rate ...;
          }
          else
          {
              Rate = rates[3];
              Tax = (Money - 100000) * Rate ...;
          }
      }
      public void PrintToConsole()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {Money,10:C}");
          Console.WriteLine($"应付税收: {Tax,10:C} ({Rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {Money - Tax,10:C}");
      }
      public void ExportToExcel()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {Money,10:C}");
          Console.WriteLine($"应付税收: {Tax,10:C} ({Rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {Money - Tax,10:C}");
      }
  }
#+end_src

:break:

#+begin_src csharp
class TaxCal
{
    private double _money; // 用来承载后面的数据，税前收入
    public double Money
    {
        get { return _money; } // xxxx.Money
        set                    // xxxx.Money = 3333;
        {
            if (value < 0)
            {
                Console.WriteLine("\n参数输入格式不正确！");
                Environment.Exit(0);
            }
            _money = value;
            CalculateTax();
        }
    }
    public double Rate { get; private set; }
    public double Tax { get; private set; }

    public void CalculateTax()
    {
        double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
        if (Money <= 5000)
        {
            Rate = 0;
            Tax = 0;
        }
        else if (Money < 10000)
        {
            Rate = rates[0];
            Tax = (Money - 5000) * Rate;
        }
        else if (Money < 20000)
        {
            Rate = rates[1];
            Tax = (Money - 10000) * Rate + 5000 * rates[0];
        }
        else if (Money < 100000)
        {
            Rate = rates[2];
            Tax = (Money - 20000) * Rate + 10000 * rates[1] + 5000 * rates[0];
        }
        else
        {
            Rate = rates[3];
            Tax = (Money - 100000) * Rate + 80000 * rates[2] + 10000 * rates[1] + 5000 * rates[0];
        }
    }
    public void PrintToConsole()
    {
        Console.WriteLine();
        Console.WriteLine($"税前收入: {Money,10:C}");
        Console.WriteLine($"应付税收: {Tax,10:C} ({Rate:P1})");
        Console.WriteLine("".PadRight(30, '┈'));
        Console.WriteLine($"税后收入: {Money - Tax,10:C}");
    }
    public void ExportToExcel()
    {
        Console.WriteLine();
        Console.WriteLine($"税前收入: {Money,10:C}");
        Console.WriteLine($"应付税收: {Tax,10:C} ({Rate:P1})");
        Console.WriteLine("".PadRight(30, '┈'));
        Console.WriteLine($"税后收入: {Money - Tax,10:C}");
    }
}
#+end_src
#+end_div

*** Lazy Version

#+begin_div :class mc11

#+begin_src csharp
  class TaxCalLazy
  {
      private double Money;

      public double GetMoney()
      {
          return Money;
      }
      public void SetMoney(double duoshao)
      {
          if (duoshao < 0)
          {
              Console.WriteLine("\n参数输入格式不正确！");
              Environment.Exit(0);

          }
          Money = duoshao;
      }

      public double GetTax()
      {
          double[] rates = new double[]{0.03, 0.05, 0.2, 0.45};
          if (Money <= 5000)
          {
              return 0;
          }
          else if (Money < 10000)
          {
              return (Money - 5000) * rates[0];
          }
          else if (Money < 20000)
          {
              return (Money - 10000) * rates[1] + ...;
          }
          else if (Money < 100000)
          {
              return (Money - 20000) * rates[2] + ...;
          }
          else
          {
              return (Money - 100000) * rates[3] + ...;
          }
      }
      public double GetRate()
      {
          double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
          if (Money <= 5000)
          {
              return 0;
          }
          else if (Money < 10000)
          {
              return rates[0];
          }
          else if (Money < 20000)
          {
              return rates[1];
          }
          else if (Money < 100000)
          {
              return rates[2];
          }
          else
          {
              return rates[3];
          }
      }

      public void PrintToConsole()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {Money,10:C}");
          Console.WriteLine($"应付税收: {GetTax(),10:C} ({GetRate():P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {Money - GetTax(),10:C}");
      }
      public void ExportToExcel()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {Money,10:C}");
          Console.WriteLine($"应付税收: {GetTax(),10:C} ({GetRate():P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {Money - GetTax(),10:C}");
      }
  }

#+end_src

:break:

#+begin_src csharp
  class TaxCalLazy
  {
      private double _money;
      public double Money
      {
          get { return _money; }
          set
          {
              if (value < 0)
              {
                  Console.WriteLine("\n参数输入格式不正确！");
                  Environment.Exit(0);

              }
              _money = value;
          }
      }
      public double Tax
      {
          get
          {
              double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
              if (Money <= 5000)
              {
                  return 0;
              }
              else if (Money < 10000)
              {
                  return (Money - 5000) * rates[0];
              }
              else if (Money < 20000)
              {
                  return (Money - 10000) * rates[1] + 5000 * rates[0];
              }
              else if (Money < 100000)
              {
                  return (Money - 20000) * rates[2] + 10000 * rates[1] + 5000 * rates[0];
              }
              else
              {
                  return (Money - 100000) * rates[3] + 80000 * rates[2] + 10000 * rates[1] + 5000 * rates[0];
              }
          }
      }
      public double Rate
      {
          get
          {
              double[] rates = new double[] { 0.03, 0.05, 0.2, 0.45 };
              if (Money <= 5000)
              {
                  return 0;
              }
              else if (Money < 10000)
              {
                  return rates[0];
              }
              else if (Money < 20000)
              {
                  return rates[1];
              }
              else if (Money < 100000)
              {
                  return rates[2];
              }
              else
              {
                  return rates[3];
              }
          }
      }

      public void PrintToConsole()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {Money,10:C}");
          Console.WriteLine($"应付税收: {Tax,10:C} ({Rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {Money - Tax,10:C}");
      }
      public void ExportToExcel()
      {
          Console.WriteLine();
          Console.WriteLine($"税前收入: {Money,10:C}");
          Console.WriteLine($"应付税收: {Tax,10:C} ({Rate:P1})");
          Console.WriteLine("".PadRight(30, '┈'));
          Console.WriteLine($"税后收入: {Money - Tax,10:C}");
      }
  }
#+end_src
#+end_div

** 小结

* 小费计算器

核心代码:
#+begin_src csharp
  // Main 方法是程序的入口
  // args 表示从控制台传来的参数数据
  // 比如，在 CMD 窗口输入 TipCalculator 222 333 444，那么:
  //   - args[0] 就是字符串 222
  //   - args[1] 就是字符串 333
  //   - args[2] 就是字符串 444
  static void Main(string[] args)
  {
      // 字符串是用来描述世界的方式，它不能参与数学计算。
      // 因此要计算，需要先转换成合适的格式，比如 double 类型

      // 账单
      double bill = double.Parse(args[0]);
      // 小费计算
      double rate = 0.18;
      double tip = bill * rate;
      // 实际账单计算
      double realBill = bill + tip;

      // 输出
      Console.WriteLine("{0}", realBill);
  }
#+end_src

在基础代码上进行优化:
#+begin_src csharp
  // 目标:
  // 1. 让程序更健壮，避免不必要的异常抛出
  // 2. 让输出更加美观，用户体验更友好

  static void Main(string[] args)
  {
      // 声明一个变量，用来保存转换后的账单数目
      double bill;

      // 检查用户输入，如果输入不合理，给予提醒并退出程序
      // double.Parse 和 double.TryParse 都是用来将 string 类型的数据转换为 double 类型:
      //  - Parse 会在转换失败的时候抛出异常，所以如果想让程序运行良好，需要结合 try..catch 进行错误处理
      //  - TryParse 可通过返回 true/false 的方式判断转换成功与否，需要结合 out 参数存储转换后的值
      // if 是一种基本的程序流程，表示只有满足条件的时候，其代码块才会被执行。它是对顺序结构的补充
      // return 表示退出当前方法的运行。如果在 Main 方法中，则表示退出程序的运行
      //
      // 下面一句的意思是: 如果输入的参数不是 1 个，或者输入的参数不能转换为 double，那么提醒用户并退出
      if (args.Length != 1 || !double.TryParse(args[0], out bill))
      {
          Console.WriteLine("您的输入有误，正确的调用方法是:\nTipCalculator 账单数额");
          return;
      }

      // 小费以及实际账单的计算
      double rate = 0.18;
      double tip = bill * rate;
      double realBill = bill + tip;

      // 进行格式化输出，即将某个类型的数值，转换成预期格式的字符串:
      // - 使用 $ 符号，可以对变量进行内插操作; 使用 @ 可以忽略转义并运行多行字符串
      // - 通过 {a:X} 可以使用 C# 预设的某些转换规则进行转换。比如 C 表示货币，P 表示百分比
      // - 使用 {a,N} 的方式，让转换后的字符串满足 N 的长度。如果不满足，使用空格补齐。-N 表示左对齐
      // - 可以结合使用，语法为 {a,N:X...}，比如 {rate,10:P1} 表示按照百分比显示、小数保留一位、补齐为 10 的长度
      // string.PadRight 是内置的一个字符串操作的 API，表示将字符串使用某个字符补齐为多少长度
      Console.WriteLine();
      Console.WriteLine($"账单总额: {bill,10:C}");
      Console.WriteLine($"小费数额: {tip,10:C} ({rate:P1})");
      Console.WriteLine("".PadRight(30, '┈'));
      Console.WriteLine($"账单实付: {realBill,10:C}");
  }
#+end_src
