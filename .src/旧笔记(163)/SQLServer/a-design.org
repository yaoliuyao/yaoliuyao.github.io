#+TITLE: 数据库的设计


* 主流数据库简介

- IBM 研究部门。关系型数据库的构思论文《R 系统：数据库关系理论》
- [[https://baike.baidu.com/item/%E6%8B%89%E9%87%8C%C2%B7%E5%9F%83%E9%87%8C%E6%A3%AE][拉里·埃里森]]。Oracle
- IBM: db2 (破甲行动)
- 微软: SQLServer
- Sun: MySQL <小。灵活。开源免费>
- 去 IOE 化
- MariaDB
- ANSI 提出了 SQL (Structured Query Language) 标准
- 扩展阅读: [[https://www.chainnews.com/articles/140615952914.htm][励志的埃里森]]

为什么要学 SQLServer:
1. 它有图形界面，上手简单
2. 数据库的底层原理是相通的，SQL 语句遵循相同标准

学习哪些数据库:
- 基于 SQLServer 了解数据库的基本知识
- 熟悉 MySQL/Oracle 的基本操作

* 设计工具/网站

- 纸和笔
- Windows 画图工具
- visio
- StarUML
- https://www.processon.com/

* 项目的生命周期

[[file:img/software-flow.svg]]

* 概要设计·实体关系图

- Entity-Relationship Graph
- E-R 图

基本要素:
- 用方框的方式表示 *实体*
- 用连线的方式表示 *联系*
- 用圆圈的方式表示 *属性*
- 在连线上可以标明 *具体关系*

要求:
- 熟悉 E-R 图中各种元素的表示方式
- 能够 *上手一款* 画图软件，并能将一些简单的关系用软件表示出来

示例:
#+ATTR_HTML: :width 400
[[file:img/er-demo.png]]

* 设计的理论依据: 范式

范式 (Normal Form) 是什么:
- 如何使用关系型的理论创建表？在长时间的实践中，大家累计的一些经验的荟萃
- 范式并不是强制性的，而是我们在创建表的时候的一些参考
- 虽然是一种参考，但是为了能够更加合理创建表，我们应该需要遵守一些范式
- 最重要的是前三个范式

使用范式主要的意图，吸取前人的经验:
- 让表的结构更合理
- 减少表中数据的冗余
- 能够保证后期数据检索的效率

** 示例设计

学生管理系统:

| 姓名 | 性别 | 地址         | 班级       | 成绩             |
|------+------+--------------+------------+------------------|
| 张三 | 女   | 广东省珠海市 | 169 老王   | 语文: 98 数学:89 |
| 李四 | 男   | 江西省赣州市 | 169 老王   | 语文: 69 数学:99 |
| 王五 | 男   | 广西省柳州市 | 189 老王妈 | 语文: 69 数学:99 |

不合理的地方:
- 班级需要拆分，因为拆完关系比较明确
- 比如，上表中，如何查询 "找出所有老王的学生"?
- 比如，上表中，如何查询 "找出所有学生的成绩在 80 以上的学生"?

** 第一范式 (所有的列都是原子性的)

根据第一范式，修改为:

| 姓名 | 性别 | 省     | 市     | 班级 | 班主任 | 科目 | 成绩 |
|------+------+--------+--------+------+--------+------+------|
| 张三 | 女   | 广东省 | 珠海市 |  169 | 老王   | 语文 |   98 |
| 张三 | 女   | 广东省 | 珠海市 |  169 | 老王   | 数学 |   98 |
| 李四 | 男   | 江西省 | 赣州市 |  169 | 老王   | 语文 |   69 |
| 李四 | 男   | 江西省 | 赣州市 |  169 | 老王   | 数学 |   69 |
| 王五 | 男   | 广西省 | 柳州市 |  189 | 老王妈 | 英语 |   69 |

** 第二范式 (消除对主键的部分依赖)

所有的行必须要有主键:
| 学号 | 姓名 | 性别 | 省     | 市     | 班级 | 班主任 | 科目 | 成绩 |
|------+------+------+--------+--------+------+--------+------+------|
|  100 | 张三 | 女   | 广东省 | 珠海市 |  169 | 老王   | 语文 |   98 |
|  100 | 张三 | 女   | 广东省 | 珠海市 |  169 | 老王   | 数学 |   98 |
|  102 | 李四 | 男   | 江西省 | 赣州市 |  169 | 老王   | 语文 |   69 |
|  102 | 李四 | 男   | 江西省 | 赣州市 |  169 | 老王   | 数学 |   69 |
|  110 | 王五 | 男   | 广西省 | 柳州市 |  189 | 老王妈 | 英语 |   69 |

上表目前的主键是 (学号 + 科目):
: select 这张表 where 学号 = xxx and 科目 = xx 会得到唯一一个结果

可以看到:
- 成绩这一栏是完全依赖 (学号 + 科目) 这个主键的
- 姓名等栏，却只是依赖 (学号)，它是主键的一部分

所以，要消除部分依赖，只需要拆分为:

| 学号 | 姓名 | 性别 | 省     | 市     | 班级 | 班主任 |
|------+------+------+--------+--------+------+--------|
|  100 | 张三 | 女   | 广东省 | 珠海市 |  169 | 老王   |
|  102 | 李四 | 男   | 江西省 | 赣州市 |  169 | 老王   |
|  110 | 王五 | 男   | 广西省 | 柳州市 |  189 | 老王妈 |

| 学号 | 科目 | 成绩 |
|------+------+------|
|  100 | 语文 |   98 |
|  100 | 数学 |   98 |
|  102 | 语文 |   69 |
|  102 | 数学 |   69 |
|  110 | 英语 |   69 |

仍然存在的问题:
- 数据冗余
- 我想，将老王辞退，换成老李: update 第一张 set 班主任=老李 where 班主任=老王

** 第三范式 (消除对主键的传递依赖)

张三的班主任是老王，是因为:
1. 张三属于 169 班
2. 169 班的班主任是老王

因此，这属于传递依赖，需要消除掉。

#+CAPTION: 学生表
| 学号 | 姓名 | 性别 | 省     | 市     | 班级 |
|------+------+------+--------+--------+------|
|  100 | 张三 | 女   | 广东省 | 珠海市 |  169 |
|  102 | 李四 | 男   | 江西省 | 赣州市 |  169 |
|  110 | 王五 | 男   | 广西省 | 柳州市 |  189 |

#+CAPTION: 班级表
| 班级 | 班主任 |
|------+--------|
|  169 | 老王   |
|  189 | 老王妈 |
|  180 | 老赵   |

#+CAPTION: 成绩表
| 学号 | 科目 | 成绩 |
|------+------+------|
|  100 | 语文 |   98 |
|  100 | 数学 |   98 |
|  102 | 语文 |   69 |
|  102 | 数学 |   69 |
|  110 | 英语 |   69 |

现在，整个设计就合理多了。
