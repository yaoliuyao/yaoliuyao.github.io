#+TITLE: .NET 平台



* 简史

- 1998 年左右，Java 风靡世界。面向对象，一次编译处处运行 (解决了 C++ 之类的一些痛点)
- 微软基于 Java 搞出了一个 J++ 的东西。陷入官司。推出了 C# 语言
- 因此，C# 借鉴了很多语言: Java/C++/Pascal...
  + 摸着 Java 过河，很多坑被 Java 踩过之后，不需要再踩
  + 微软专有的，历史包袱，开发成本相对低多了
- .net framework，微软在 Windows 上的专有技术，C# 的发挥受限于 .net 平台
- .net core 从 .net framework 中被剥离出来，成为开源、免费、跨平台的解决方案
- .net5，自此合二为一

* 开发方式
** 原始方式

安装完 Windows 之后，自带的 csc 在 C:\Windows\Microsoft.NET\版本号 下面。

所以，可以使用记事本等任何顺手的文本编辑器，创建并打开编辑一个 Hello.cs 的文件:
#+begin_src csharp
  namespace Hello {
      class Test {
          static void Main() {
              System.Console.WriteLine("hello, csharp");
          }
      }
  }
#+end_src

接下来，就可以编译，并运行了:
: C:\Windows\...\csc.exe Hello.cs
: Hello.exe

** 解锁开发的完全能力 (Visual Studio)

如果在 Windows 下面进行开发的话。最好的环境就是 VS。

三个版本:
1. 社区版
2. 专业版
3. 企业版

** 跨平台开发 (.net core + vscode)

首先，安装 .Net Core 的开发环境
- https://dotnet.microsoft.com/download
- 下载安装 SDK 即可。安装完毕，得到一个 dotnet 命令
  : dotnet

其次，安装并配置 VSCode:
- https://code.visualstudio.com/
- 打开 VSCode，在插件市场，搜索 C# 插件并安装

最后，就可以使用 ~dotnet~ 命令进行项目的创建和运行，使用 VSCode 进行代码的编写了:
#+begin_src sh
  # 1. 先创建项目
  cd Workdir
  dotnet new console -o MyHello

  # 2. 使用 VSCode 打开项目，并进行编辑
  code MyHello

  # 3. 使用 dotnet 命令编译并允许
  dotnet run
#+end_src

PS, dotnet 命令:
#+begin_src sh
  dotnet new console # 在当前文件夹创建一个 Console 类型的项目
  dotnet new mvc/wpf # 创建其他类型的项目
  dotnet new console -o Hello # 创建一个 Hello 文件夹，包含 Console 类型的项目

  dotnet build
  dotnet run  # dotnet build && cd ... && xxx.exe
#+end_src  

** 书籍和文档

- MSDN (墙裂推荐): https://docs.microsoft.com/zh-cn/dotnet/csharp/
- C# 入门经典: https://item.jd.com/12508114.html
- C# 图解教程: https://item.jd.com/12601789.html
- C# 高级编程: https://item.jd.com/45998158124.html
- CLR via C#: https://item.jd.com/1403938154.html

* .NET 平台的项目
** Console 控制台应用

基于命令行窗口的应用。

** WinForm 窗体应用

基本特点:
- 简单，直观
- 效率高，比较快

** WPF 应用程序

- MVVM
- 数据驱动
- 通过 xaml 文件进行视图分离

** ASP.NET WebForm

比较老的，跟 WinForm 类似的一种 BS 开发方式。

** ASP.NET MVC

使用 MVC 三层结构，对逻辑和视图进行有效分离。

** Xamarin

移动开发，安卓或 iOS

** Unity3D

游戏开发

