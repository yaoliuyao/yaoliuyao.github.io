#+TITLE: ASP.NET



* ASP.NET

- JSP: Java Server Pages
- ASP: Active Server Pages
- ASP.NET

ASP.NET 为 .NET 平台提供了完整的进行 Web 开发的底层框架:
- (ADO.NET - EF)
- Webforms - Winforms (事件驱动、基于控件)
- ASP.NET MVC (模型-视图-控制器)
- ASP.NET Web API

ASP.NET Core:
- Razor Page
- Blazor (组件，使用 C# 写前端)
- MVC (跨平台，内置 web 服务器，内置 DI 容器)
- Web API

** 基本概念

HTML:
#+begin_example
HTML 由来. HTML的英文全称是 Hyper Text Markup Language，即超文本标记语
言。HTML是由Web的发明者 Tim Berners-Lee和同事 Daniel W. Connolly于
1990年创立的一种标记语言，它是标准通用化标记语言SGML的应用。用HTML编
写的超文本文档称为HTML文档，它能独立于各种操作系统平台 (如UNIX，
Windows等)。使用HTML，将所需要表达的信息按某种规则写成HTML文件，通过
专用的浏览器来识别，并将这些HTML文件“翻译”成可以识别的信息，即现在所
见到的网页。
#+end_example

* Summary-1

项目的创建跟初始化:
#+begin_src sh
  dotnet new mvc -o MvcMovie1
  cd MvcMovie1
  
  #dotnet tool install --global dotnet-ef --version 5.0.0
  #dotnet tool install --global dotnet-aspnet-codegenerator --version 5.0.0
  dotnet add package Microsoft.EntityFrameworkCore.SQLite --version 5.0.0
  dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 5.0.0
  dotnet add package Microsoft.EntityFrameworkCore.Design --version 5.0.0
  dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design --version 5.0.0
  
  code .
  # Movie1.cs
  
  dotnet-aspnet-codegenerator controller -name Movies1Controller -m Movie1 -dc MvcMovie1Context --relativeFolderPath Controllers --useDefaultLayout --referenceScriptLibraries -sqlite
  # appsettings.json
  
  dotnet ef migrations add FirstInit
  dotnet ef database update
  
  
  dotnet run
  dotnet watch run
#+end_src

生成种子数据:
#+begin_src sql
  insert into movie1 (id, name, price) values (1, "xx1", 123);
  insert into movie1 (id, name, price) values (2, "x2x1", 132);
  insert into movie1 (id, name, price) values (3, "xx31", 213);
  insert into movie1 (id, name, price) values (4, "x2x1", 13);
  insert into movie1 (id, name, price) values (5, "xxk1", 132);
  insert into movie1 (id, name, price) values (6, "xax1", 13);
  insert into movie1 (id, name, price) values (7, "xbx1", 23);
  insert into movie1 (id, name, price) values (8, "xxy1", 53);
  insert into movie1 (id, name, price) values (9, "xxz1", 923);
  insert into movie1 (id, name, price) values (10, "xx-1", 13);
  insert into movie1 (id, name, price) values (11, "x-x1", 123);
#+end_src

进行相关修改:
1. 修改 _layout 文件
2. 重新对 Movies1Controller 里面的内容做调整
3. 对视图页面 (Views/*) 进行编辑

添加字段:
1. 修改 Model, Url
2. 执行命令
   #+begin_src sh
     dotnet ef migrations add AddUrlToMovie1
     dotnet ef database update
   #+end_src   

添加一个 Controller:
#+begin_src sh
  # Actor.cs
  
  dotnet-aspnet-codegenerator controller -name ActorController -m Actor -dc MvcMovie1Context --relativeFolderPath Controllers --useDefaultLayout --referenceScriptLibraries -sqlite
  
  dotnet ef migrations add AddModelActor
  dotnet ef database update
#+end_src

* Request/Response
** A 超链接

将请求的参数，携带到 QueryString 中发送到服务器:
: GET http://localhost:5001/comment/dolike?id=3
: GET http://localhost:5001/comment/dolike/3

** FORM 表单

使用 Form 标签 + Input 进行更多属性的 *交互式* 提交:
#+begin_src html
  <!-- GET /comment/dosave?x=1&y=2&z=3 -->
  
  <form action="/comment/dosave" method="get">
    <input name="x" value="1">
    <input name="y" value="2">
    <input name="z" value="3" type="password/number/date">
  
    <div>
      <div>
        <button>提交</button>
        <input type="submit" value="提交">
      </div>
    </div>
  </form>
#+end_src

** [AJAX] XMLHttpRequest

https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest

Asynchronous JavaScript and XML:
- 异步 (不会导致当前页面卡顿)
- 局部刷新 (JS 操作 DOM 节点)

使用 AJAX 进行操作的基本流程:
- 第一步，发送请求
- 第二步，获取响应的数据
- 第三步，将数据组装为需要的 html 字符串
- 第四步，找到某个 dom 节点，将上述 html 字符串添加到其中

#+begin_src js
  var xhr = new XmlHttpRequest();
  //xhr.setRequestHeader("content-type", "application/x-www-form-urlencoded");
  xhr.setRequestHeader("xxx", "123");
  xhr.open("get", "http://localhost:5001/comment/dosave");  
  xhr.send("Author=lisi&Content=xxx");
  
  //// 通过事件，绑定相关动作
  xhr.onload = (event) => {
      if (xhr.statusCode == 200)
      {
          let content = xhr.responseText; // 返回的响应字符串
          //window.location.refresh();
          //dom.innerHTML = content;
          dom.innerHTML = JSON.parse(content).xxx;
      }
  };
  xhr.error = (err) =>
  {
      alert("保存失败!");
  }
#+end_src

对于 JSON 的处理
#+begin_src js
  let xhr = new XmlHttpRequest();
  xhr.open();
  xhr.send();
  
  // 第一种方式
  xhr.onload = (e) =>
  {
      if (xhr.statusCode == 200)
      {
          let text = xhr.responseText; // DOMString
          let json = JSON.parse(text); // JSON 对象
          alert(json[1].name);
      }
  };
  
  // 第二种方式
  xhr.responseType = "json";
  xhr.onload = (e) =>
  {
      if (xhr.statusCode == 200)
      {
          let json = xhr.response; // 根据 responseType 自动格式化
          alert(json[1].name);
      }
  };
#+end_src




