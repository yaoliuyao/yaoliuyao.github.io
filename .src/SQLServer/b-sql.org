#+TITLE: SQL 语句


* SQL 是什么
:PROPERTIES:
:ID:       305f22db-1d25-4095-8fe0-599b14d50819
:END:

Structured Query Language, 结构化查询语言。

它是操作[[file:../roam/20200826034745-关系型数据库.org][关系型数据]]的标准语言。

发展简史:
- 1976 左右，IBM 发表了想法
- 1979 左右，Oracle 给出了实现
- 1990 左右，SQL 成了工业标准

* SQL 的分类
** DDL (Data Definition Language) 数据定义语言

用来对数据的对象进行定义的一些语句:
- 创建: ~create 类型 名字 详细定义~ 例: ~create table xxx ()~
- 修改: ~alter 类型 名字 你要修改的东西~ 例: ~alter table xxx add column (yyy int)~
- 删掉: ~drop 类型 名字~ 例: ~drop table xxx~

** DML (Data Manipulation Language) 数据操纵语言

对数据的操作:
- 增(C): ~insert into~
- 删(D): ~delete from~
- 改(U): ~update~
- 查(R): ~select from~  *-*-

** DCL (Data Control Language) 数据控制语言

- 授予权限: ~grant to~
- 撤回权限: ~revoke from~

** TCL (Transaction Control Language) 事务控制语言

- 设置保存点: ~savepoint xxx~
- 撤回: ~rollback [xxx]~
- 提交: ~commit~

* SQLServer 中的 SQL 语句
** database 的创建和删除

最基本的创建语句:
#+begin_src sql
  create database demo;
  go
#+end_src

带各种参数的创建语句:
#+begin_src sql
  create database school
  on
  (
     name = school,                   -- 主数据文件的逻辑名称
     filename = 'd:\data\school.mdf', -- 主数据文件数据保存的位置
     size = 10,                       -- 主数据文件的初始化大小为 10M
     maxsize = 500,                   -- 主数据文件的最大值为 500M
     filegrowth = 10%                 -- 主数据文件的增长策略
  )
  log on
  (
     name = school_log,                   -- 日志文件的逻辑名字
     filename = 'd:\data\school_log.ldf', -- 日志文件的保存位置
     size = 10,
     maxsize = 100,
     filegrowth = 2
  );
  go
#+end_src

删除的语句:
#+begin_src sql
  drop database school;
  drop database home;
  drop database demo;
#+end_src

** table 的创建

基本的创建示例:
#+begin_src sql
  use xxx;
  go
  create table room_type
  (
     type_number varchar(4) primary key,
     type_name varchar(40),
     pricE money,
     [coPrice] money,
     total_number decimal(3, 0) not null default 0
  );
  go
#+end_src

稍复杂一点的例子:
#+begin_src sql
  use xxx;
  go
  create table stuInfo
  (
     stuNo int identity primary key,         -- 主键+自增
     stuName varchar(12) not null,           -- 非空约束
     stuAge int                              -- 有问题!!!
       not null                              -- 非空约束
       check(stuAge >= 0 and stuAge <= 100), -- 检查约束
     stuSex nchar(1)
       not null                              -- 非空约束
       check(stuSex = '男' or stuSex = '女') -- 检查约束
       default ('男'),                       -- 默认值
     stuTel varchar(15),
     stuAddress varchar(50) default ('地址不详'),
     className varchar(12) not null
  );
  go
  create table exam
  (
    examNo int primary key identity(1, 1),
    stuNo int foreign key references stuInfo(stuNo),       -- 外键约束
    written float check (written >= 0 and written <= 100), -- 笔试
    lab float check (lab >= 0 and lab <= 100)              -- 机试
  );
  go
#+end_src

Question:
- char/nchar/varchar/nvarchar 类型的区别
  #+begin_src sql
    create table x (s char(1));
    create table y (s nchar(1));
    insert into y values ('男');
  #+end_src
- GBK/UTF8/UTF16 的区别
- 什么是外键，它有什么作用，是不是必须的? 外键有哪些添加方式?

小结:
- 默认情况下，字段的大小写不敏感，可以使用 ~[xxx]~ 方式强制其敏感
- 在数据库中，字段/表名字使用的是下划线分割的命名规则
- 数据应该是静态的，年龄 (Age) 不适合作为一个字段，用 birth 代替
- 建议使用 *代理主键* 代替 *自然主键*，即主键不应与业务有关
- 表跟列的命名，有不同风格:

  #+begin_src sql
    create table student (id, name, tel, addr);
    create table t_student (stu_id, stu_name, stu_tel, stu_addr);
  #+end_src

** 常见数据类型
*** 数值

整数:
- tinyint
- smallint
- int
- bigint

浮点:
- real
- float
- decimal(5,2)

另外:
- smallmoney
- money

*** 字符串

- char/nchar
- varchar/nvarchar，有存储上限的 8000
- text/ntext，表示巨大的存储

*** 日期/时间

- date
- time
- datetime
- datetime2
- getdate()

*** 其他类型

- image
- binary
- varbinary

*** 使用例子

#+begin_src sql
  use xxx;
  go
  create table xx13 (aaa datetime2 default getdate(), b int);
  insert into xx13 (b) values (1);
  go

  select * from xx13;
#+end_src

** table 的修改

基本修改:
#+begin_src sql
  -- 添加字段
  alter table stuinfo add stuEmail varchar(50) not null;

  -- 修改字段
  alter table stuinfo alter column stuname nvarchar(9) not null;

  -- 删除字段
  alter table stuinfo drop column stuEmail;

  -- 约束的添加和删除
  alter table stuinfo add constraint pk_stuno primary key (stuno);
  alter table stuinfo drop constraint pk_stuno;
  alter table stuinfo add constraint fk_stuno foreign key (stuno) references xxx(no);
  alter table stuinfo drop constraint fk_stuno;
#+end_src

** table 的删除

#+begin_src sql
  drop table xxx;
#+end_src

** constraint 的管理

分类:
- 主键约束 (Primary Key)
- 唯一约束 (Unique)
- 检查约束 (Check)
- 默认约束 (Default)
- 外键约束 (Foreign Key)

到底使用外键否? 取决于 *场景* 和 *权衡*。

添加到列上的约束:
#+begin_src sql
  create table demo_constraint
  (
     aaa int primary key,
     bbb int not null,
     ccc int default 1,
     ddd int check (ddd > 5),
     eee int unique,
     fff int references xxx(number)
  );
  -- 如果修改，可以使用 alter table ... alter column ...
#+end_src

表级约束 (建表的时候添加):
#+begin_src sql
  create table demo_constraint
  (
     aaa int,
     bbb int,
     ccc int,
     ddd int,
     eee int,
     fff int,
     [constraint pk_aaa] primary key (aaa),
     [constraint fk_fff] foreign key (fff) references xxx(number)
  );
  alter table demo_constraint drop constraint pk_aaa;
#+end_src

表级约束 (建完表之后添加，在实际中更常用):
#+begin_src sql
  create table demo_constraint
  (
     aaa int,
     bbb int,
     ccc int,
     ddd int,
     eee int,
     fff int
  );
  alter table demo_constraint add constraint pk_aaa primary key (aaa);
  alter table demo_constraint add constraint fk_fff foreign key (fff) references xxx(number);
#+end_src

在实际中，可能要综合使用:
#+begin_src sql
  create table demo_constraint
  (
     aaa int,
     bbb int not null,
     ccc int unique,
     ddd int default 2,
     eee int check (eee > 4),
     fff int,
     primary key (aaa)
  );
  alter table demo_constraint add constraint fk_fff foreign key (fff) references xxx(number);
#+end_src

** insert 插入

基本写法:
#+begin_src sql
  create table zzz (a int, b text, c date);

  -- 按照顺序对应表中的字段 (不推荐)
  insert into zzz values (111, 'abc', '2009-02-13');

  -- 如果发生表的字段增加的情况，上述的语句会出错
  alter table zzz add ddd varchar(20) default ('bossisevil');
  insert into zzz values (111, 'abc', '2009-02-13'); -- 出错
  insert into zzz (a, b, c) values (111, 'abc', '2009-02-13'); -- 正确写法!

  -- 为数据表，增加一个默认插入时间的字段
  alter table zzz add created_at datetime default getdate();
  insert into zzz (a, b, c) values (111, 'abc', '2009-02-13');
  select * from zzz; -- created_at 字段被填充了值
#+end_src

复制表的数据:
#+begin_src sql
  -- 复制表的结果，以及数据
  select * into zzzzz from zzz;

  -- 只是复制数据
  insert into zzzz select * from zzz where ddd is not null;
#+end_src

** delete/truncate 删除

#+begin_src sql
  -- 删除 zzz 中所有数据
  delete from zzz;

  -- 删除 zzz 中部分数据
  delete from zzz where ddd is null;

  -- 删除所有数据
  -- 比 delete 更高效 (不用记录日志)
  -- truncate 不能加条件
  -- 属于 DDL 语句
  -- 坚决要慎用此语句
  truncate table zzz;
#+end_src

** update 更新

#+begin_src sql
  -- 一定不要落下 where 条件
  -- 在更新前，一定先通过 select 确定要修改的数据条目
  update zzz set a = 2 where a = 1;
  update zzz set a = a + 2 where a = 1;
#+end_src

** select 查询
*** 测试数据

#+begin_src sql
  CREATE DATABASE oa;
  use oa;

  CREATE TABLE dept ( -- department
    deptno int,
    dname  VARCHAR(14),
    loc    VARCHAR(13), -- location/address
    CONSTRAINT pk_dept PRIMARY KEY (deptno)
  );

  CREATE TABLE emp ( -- employee
    empno    int,
    ename    VARCHAR(10),
    job      VARCHAR(9),
    mgr      int,
    hiredate DATE,
    sal      float,
    comm     float,
    deptno   int,
    CONSTRAINT pk_emp PRIMARY KEY (empno),
    CONSTRAINT fk_deptno FOREIGN KEY (deptno) REFERENCES dept (deptno)
  );

  CREATE TABLE bonus ( -- bonus
    ename VARCHAR(10),
    job   VARCHAR(9),
    sal   float,
    comm  float
  );

  CREATE TABLE salgrade ( -- salary grade
    grade int,
    losal float,
    hisal float
  );

  INSERT INTO dept VALUES(10, 'ACCOUNTING', 'NEW YORK');
  INSERT INTO dept VALUES(20, 'RESEARCH', 'DALLAS');
  INSERT INTO dept VALUES(30, 'SALES', 'CHICAGO');
  INSERT INTO dept VALUES(40, 'OPERATIONS', 'BOSTON');

  INSERT INTO emp VALUES( 7839, 'KING', 'PRESIDENT', null, '1981-11-17', 5000, null, 10 );
  INSERT INTO emp VALUES( 7698, 'BLAKE', 'MANAGER', 7839, '1981-05-01', 2850, null, 30);
  INSERT INTO emp VALUES( 7782, 'CLARK', 'MANAGER', 7839, '1981-06-09', 2450, null, 10);
  INSERT INTO emp VALUES( 7566, 'JONES', 'MANAGER', 7839, '1981-04-02', 2975, null, 20);
  INSERT INTO emp VALUES( 7788, 'SCOTT', 'ANALYST', 7566, '1987-07-13', 3000, null, 20);
  INSERT INTO emp VALUES( 7902, 'FORD', 'ANALYST', 7566, '1981-12-03', 3000, null, 20 );
  INSERT INTO emp VALUES( 7369, 'SMITH', 'CLERK', 7902, '1980-12-17', 800, null, 20 );
  INSERT INTO emp VALUES( 7499, 'ALLEN', 'SALESMAN', 7698, '1981-02-20', 1600, 300, 30);
  INSERT INTO emp VALUES( 7521, 'WARD', 'SALESMAN', 7698, '1981-02-22', 1250, 500, 30 );
  INSERT INTO emp VALUES( 7654, 'MARTIN', 'SALESMAN', 7698, '1981-09-28', 1250, 1400, 30 );
  INSERT INTO emp VALUES( 7844, 'TURNER', 'SALESMAN', 7698, '1981-09-08', 1500, 0, 30);
  INSERT INTO emp VALUES( 7876, 'ADAMS', 'CLERK', 7788, '1987-07-13', 1100, null, 20 );
  INSERT INTO emp VALUES( 7900, 'JAMES', 'CLERK', 7698, '1981-12-03', 950, null, 30 );
  INSERT INTO emp VALUES( 7934, 'MILLER', 'CLERK', 7782, '1982-01-23', 1300, null, 10 );

  INSERT INTO salgrade VALUES (1, 700, 1200);
  INSERT INTO salgrade VALUES (2, 1201, 1400);
  INSERT INTO salgrade VALUES (3, 1401, 2000);
  INSERT INTO salgrade VALUES (4, 2001, 3000);
  INSERT INTO salgrade VALUES (5, 3001, 9999);

  go
#+end_src

*** 基本查询

基本句式:
#+begin_src sql
  select 字段们 
    from 表名
    where 条件 or/and/not 其他条件
    group by 组
    having 分组基础上的条件
    order by 排序的依据;
#+end_src

基本使用:
#+begin_src sql
  -- 最简单的查询
  select * from emp;

  -- 指定字段
  select empno, ename from emp;

  -- 添加条件
  select empno, ename, sal, comm from emp where sal < 1500;

  -- 组合条件
  select empno, ename, sal, comm from emp where sal < 1500 and comm is null;
  select empno, ename, sal, comm from emp where (sal < 1500 and comm is null) or sal < 1300;
  select empno, ename, sal, comm from emp where sal + isnull(comm, 0) < 1800;

  -- 使用别名
  select empno, ename, sal - 200 as sal, comm from emp;
  select empno, ename, sal - 200 + isnull(comm, 0) as total_sal from emp;

  -- 进行计算
  select empno,
         ename + ' - ' + job as who,
         sal - 200 + isnull(comm, 0) as total_sal
    from emp;

  -- 进行排序
  select empno,
           ename + ' - ' + job as who,
           sal - 200 + isnull(comm, 0) as total_sal
      from emp
      order by total_sal;

  -- 反向排序
  select empno,
           ename + ' - ' + job as who,
           sal - 200 + isnull(comm, 0) as total_sal
      from emp
      order by total_sal desc; -- Ascending

  -- 多个排序
  select * from emp
    order by sal + isnull(comm, 0) desc,
             hiredate desc;

  -- 结合 where，注意顺序
  select * from emp
    where empno <> 7839
    order by sal + isnull(comm, 0) desc,
             hiredate desc;
#+end_src

统计查询:
#+begin_src sql
  select count(*) from emp;
  select count(1) from emp;     -- 不推荐
  select count(empno) from emp; -- 不推荐

  select max(sal) from emp;
  select min(sal) from emp;
  select avg(sal) from emp where deptno = 20;
#+end_src

快捷方式:
#+begin_src sql
  -- 完全等效，表示区间
  select * from student where score >= 60 and score <= 90;
  select * from student where score between 60 and 90;

  -- 完全等效，表示选项
  select * from student where class='163' or class='165' or class='168';
  select * from student where class in ('163', '165', '168');
  select * from student where class not in ('163', '165', '168');
#+end_src

小结:
- 使用 * 代表所有字段，结果会按照定义的顺序返回
- 使用 count(*) 来统计总数
- 注意 where/group/order-by 的顺序
- 使用 != 或 <> 来表示不等于
- 使用 is null 或 is not null 表示空或非空
- SQLServer 中使用 + 连接字符串

*** 子查询 (subquery)
**** 作为临时表存在

#+begin_src sql
  -- 实际上，就是内存中的临时表
  select ename, job from (
      select * from emp where sal > 2000
    ) as a1
    where sal < 5000;

  -- 疯狂模式
  select ename from (
    select ename from (
      select ename from (
        select ename from (
          select ename, job from (
            select * from emp where sal > 2000
          ) as a1
          where sal < 5000)
        as a2 )
      as a3)
    as a4)
  as a5;
#+end_src

**** 作为字段存在

#+begin_src sql
  select empno, ename,
         job, sal, comm,
         deptno,
         sal - (select avg(sal) from emp) as chaju -- 单行单字段
     from emp
     order by job;
#+end_src

**** 作为条件存在

基本使用:
#+begin_src sql
  -- 查询所有工资拖后腿的人

  -- 首先，我们查:
  --   select * from emp;
  -- 其次，要过滤，工资低
  --   select * from emp where sal < ?;
  -- 然后，少于多少呢？平均工资
  --   select avg(sal) from emp;
  -- 最后，结合起来:
  select * from emp where sal < (select avg(sal) from emp);

  -- 增强版: 实际收入拖后腿
  select * from emp 
    where sal + ISNULL(comm,0) < (select AVG(sal +ISNULL(comm,0)) from emp);

  -- 查询所有的非 ANALYST 中工资比 ANALYST 最低工资还高的人
  -- 查询所有[的[非 ANALYST 中][工资比 [ANALYST 最低工资]还高]]的人
  -- 步骤拆解:
  -- 1. 最低工资是多少?
  select min(sal) from emp where job = 'ANALYST';
  -- 2. 过滤第一步: 非 ANALYST
  select * from emp where job <> 'ANALYST';
  -- 3. 过滤第二步: 工资比 ? 高
  select * from emp where sal > (select min(sal) from emp where job = 'ANALYST');
  -- 4. 整合所有
  select * from emp
    where job <> 'ANALYST'
      and sal > (select min(sal) from emp where job = 'ANALYST');
#+end_src

IN 语句:
#+begin_src sql
  -- 使用 in 结合 subquery 将条件动态化 (多行单列)
  select * from student where class in (163, 165, 169);
  select * from student where class in (select classname from class);

  -- 请您查找所有 Research 部门的人
  select * from emp;          -- 悲催的是，emp 表中没有 dname 字段; 欣喜的是，它有 deptno 字段
  select * from dept where dname = 'RESEARCH'; -- 通过这步，可以得到 RESEARCH 部门的编号为 20
  select * from emp where deptno = 20;         -- 结合上一步，筛选出符合条件的人即可

  -- 查找所有的人; 其 deptno 属于 dept 表中 dname 为 Research 的那些 dept
  select * from emp where deptno in (select deptno from dept where dname = 'RESEARCH');

  -- 增强版: 查找所有 RESEARCH 部门还有在 BOSTON 工作的人
  select * from emp where deptno in (select deptno from dept where dname = 'RESEARCH' or loc = 'BOSTON');

  -- 增强版: 查找所有 RESEARCH 部门还有在 BOSTON 工作的，并且工资等级为 4 或 5 的人
  -- 断句: 查找所有[( RESEARCH 部门还有在 BOSTON 工作的)，并且(工资等级为 4 或 5 的)]人
  select * from emp
    where deptno in (select deptno from dept where dname = 'RESEARCH' or loc = 'BOSTON')
      and sal >= 2001;
  -- 使用 subquery 动态化
  select * from emp
    where deptno in (select deptno from dept where dname = 'RESEARCH' or loc = 'BOSTON')
      and sal >= (select losal from salgrade where grade = 4);
  -- 让事情更细致
  select * from emp
    where deptno in (select deptno from dept where dname = 'RESEARCH' or loc = 'BOSTON')
      and sal between (select losal from salgrade where grade = 4)
                  and (select hisal from salgrade where grade = 5);
#+end_src

EXISTS 语句:
#+begin_src sql
  -- 下面两句功能上是等效的
  select * from emp
    where deptno in (select deptno from dept where loc = 'CHICAGO');
  select * from emp
    where exists (select * from dept where emp.deptno = dept.deptno 
                                       and dept.loc = 'CHICAGO');
  -- 性能比较 (脑补)
  select * from student where cardid in (select id from renkou where shengfen='广东');
  select * from student where exists (select id from renkou where renkou.id = student.cardid and shenfen = '广东');
  select * from student s where exists (select id from renkou r where r.id = s.cardid and r.shenfen = '广东');
#+end_src

ALL/ANY/SOME 语句:
#+begin_src sql
  select * from student s
    where stuno = any(select stuno from exam e where written >= 60 and lab >= 60);

  select * from student s
    where stuno in (select stuno from exam e where written >= 60 and lab >= 60);

  select * from student s
    where exists (select * from exam e where s.stuno = e.stuno and e.written >= 60 and e.lab >= 60);

  create table t1 (n int);
  create table t2 (n int);
  insert into t1 values (2), (3);
  insert into t2 values (1), (2), (3), (4);
  select * from t2 where n > all(select * from t1);   -- 4
  select * from t2 where n > some(select * from t1);  -- 3, 4
#+end_src

小结:
- 很多人不愿意用 exists，而是喜欢用 in，因为 in 更容易理解并且语句更简短
- 实际上，更推荐使用 exists，因为在很多场合 exists 更有效率
  #+begin_src sql
    -- 高额的空间占用
    -- 巨大的对比次数
    select * from student where cardid in (select id from renkoubiao where shengfen='广东');
  #+end_src
- ANY/SOME/ALL 是 exists 的语法糖，在某些场景之下，更加直观

**** 阶段性作业 (subquery)

查询出芝加哥工作的工资最高的人的上司的工资，超出平均工资的数目:
#+begin_src sql
  -- 查询芝加哥工作的所有人
  select * from emp
    where deptno = (select deptno from dept where loc = 'CHICAGO');

  -- 查询芝加哥工资最高的那个人
  -- 分解题目:
  -- 1. 定位到芝加哥城市的部门编号 (select deptno from dept where loc = 'CHICAGO');
  -- 2. 查找所有在芝加哥工作的人 (根据上述的部门编号) (select * from emp where deptno = ?);
  -- 3. 计算所有芝加哥工作的人的最高工资 (select max(sal) from emp where deptno = ?);
  -- 4. 获取工资最高的人的信息 (select * from emp where deptno = ? and sal = ?);
  select * from emp
    where deptno = (select deptno from dept where loc = 'CHICAGO')
      and sal = (select max(sal) from emp where deptno = (select deptno from dept where loc = 'CHICAGO'));
  -- 借助排序和 top 进行实现
  select top 1 * from emp
    where deptno = (select deptno from dept where loc = 'CHICAGO')
    order by sal desc;

  -- 查询芝加哥工资最高的那个人的上司
  select * from emp
    where empno = (select top 1 mgr from emp
                     where deptno = (select deptno from dept where loc = 'CHICAGO')
                     order by sal desc);

  -- 查询芝加哥工资最高的那个人的上司工资跟平均工资的差距
  select *, sal - (select AVG(sal) from emp) as chaju from emp
    where empno = (select top 1 mgr from emp
                     where deptno = (select deptno from dept where loc = 'CHICAGO')
                     order by sal desc);
#+end_src

*** 连接查询 (join)

- emp
  + ename
  + sal
  + deptno
- dept
  + deptno
  + dname
  + loc

这其实是三种解决问题的思路:
#+begin_src sql
  ---- 查询出所有在芝加哥工作的员工

  -- 1. 我的编号，在你的编号之内
  select * from emp
    where deptno in (select deptno from dept where loc='xxx');

  -- 2. 我的数据，要逐条跟你的比对，逐步过滤
  select * from emp e
    where exists (select * from dept d where d.deptno = e.deptno and d.loc = 'xxx');

  -- 3. 先拉你创建临时表，再考虑条件的事
  select * from emp
     join dept on emp.deptno = dept.deptno
     where loc = 'CHICAGO' or dname = 'RESEARCH';
#+end_src

查找所有 Research 部门的人:
#+begin_src sql
  -- 根据所有条件创建一个临时表
  select a.*,b.dname,b.loc from emp a
     join dept b on a.deptno = b.deptno and b.dname='Research';

  -- 先创立一张临时表然后根据条件进行筛选
  select a.*,b.dname,b.loc from emp a
     join dept b on a.deptno = b.deptno
     where b.dname='Research';

  -- 非规范方式
  select * from emp e, dept d
     where e.deptno = d.deptno and d.dname = 'Research';
#+end_src

左、右、全连接 (Left/Right/Full Join):
#+begin_src sql
  -- 示例数据
  create table t_student
  (
    id int identity primary key,
    name varchar(200),
    classname varchar(200)
  );
  create table t_class
  (
    classname varchar(200),
    loc varchar(200)
  );
  insert into t_class
         values ('163', '201'),
                ('164', '202'),
                ('165', '404');
  insert into t_student (name, classname)
         values ('zhangsan', '164'),
                ('lisi', '165'),
                ('wangwu', '165'),
                ('zhaoliu', '165'),
                ('sunqi', '');

  -- 查找所有学生，以及他的班级
  select * from t_student s
    join t_class c on s.classname = c.classname;
  select * from t_student s
    [inner] join t_class c on s.classname = c.classname;
  select * from t_student s
    [left] join t_class c on s.classname = c.classname;
  select * from t_student s
    [right] join t_class c on s.classname = c.classname;
  select * from t_student s
    [full] join t_class c on s.classname = c.classname;
#+end_src

笛卡儿积 (叉乘):
#+begin_src sql
  -- 形成的数据是没有意思的，因为很多数据是不对的
  -- 但是，它却是其它有意义的连接的内在基础  
  select * from emp, dept;
  select * from emp 
    [cross] join dept;
#+end_src

*** 合并 (union)

Union 可以连接一切，有意义的，还有无意义的。

#+begin_src sql
  -- 毫无意义（？）的 Union
  select empno from emp
  union
  select deptno, dname from dept;

  -- 稍微有点意义的 Union
  -- 将所有学生和员工都列出来
  select name from t_student
  union
  select ename from emp;

  -- 也可以连接自身表
  select * from emp where sal > 2000 or sal < 1000;
  select * from emp where sal > 2000
  union
  select * from emp where sal < 1000;
#+end_src

*** 分组、窗口查询 (group by/over)

#+begin_src sql
  -- 可以使用 union 手动分组
  select 10, avg(sal) from emp where deptno = 10
  union
  select 20, avg(sal) from emp where deptno = 20
  union
  select 30, avg(sal) from emp where deptno = 30;

  -- 使用分组来简化语句。数据库内部的实现逻辑跟上述 union 版本类似
  select deptno, AVG(sal), MAX(sal), MIN(sal) from emp 
    group by deptno;

  -- 如果想基于分完的组进行过滤，下面写法是 **错的**
  select deptno, AVG(sal) as a, MAX(sal) as d, MIN(sal) as x from emp 
    group by deptno
    where AVG(sal) > 1000;

  -- 可以使用子查询的形式，解决
  select * from 
  ( select deptno, AVG(sal) as a, MAX(sal) as d, MIN(sal) as x from emp 
          where mgr is not null
          group by deptno
  ) as v where a > 2000;
  
  -- 上述写法虽然有效，可是并不够简洁，于是有了 having 关键词
  -- having 是跟 group by 搭配的 `where`
  -- 于是 where -> group by -> having
  -- 先过滤，再分组，再在分组结果的基础上过滤
  select deptno, AVG(sal) as a, MAX(sal) as d, MIN(sal) as x from emp 
    where mgr is not null
    group by deptno
    having AVG(sal) > 2000;
#+end_src

查询所有部门最高工资的人:
#+begin_src sql
  select * from
    (select row_number() over (partition by deptno order by sal desc) as rn, * from emp) as s
    where rn = 1;

  select * from
    (select rank() over (partition by deptno order by sal desc) as rn, * from emp) as s
    where rn = 1;
#+end_src

*** 分页查询 (top/row_number/fetch-offset)

只拿出分数据。

最经典的分页语句 (top):
#+begin_src sql
  select top 2 * from emp;

  -- 2 - 4
  -- 1. 前 4 行
  -- 2. 反向
  -- 3. 前两条
  -- 4. 反向
  select * from (select top 3 * from (select top 4 * from emp order by empno) as t order by empno desc) as x order by empno desc;

  -- 另一种思路
  select top 3 * from emp
    where empno not in (select top 1 empno from emp order by empno);

  -- 其他数据库对比
  select * from emp limit 3 offset 4; -- mysql/sqlite/postgresql
  select * from (select *, rownum as rn from emp) rn between 3 and 5; -- oracle
#+end_src

借助窗口函数进行选取 (*row_number*):
#+begin_src sql
  select * from 
     (select row_number() over (order by empno) as rn, * from emp) as s
     where rn between 2 and 5;
#+end_src

SQLServer 2012 以后，开始支持标准的 fetch-offset 写法:
#+begin_src sql
  select * from emp fetch next 5 rows offset 4 rows only order by empno;
#+end_src

** Transaction 事务
*** 什么是事务 (ACID)

#+begin_quote
要么都成，否则都不成。
#+end_quote

事务有哪些属性 (ACID, 酸) *[这是一个非常常见的面试题]*:
1. Atomicity (原子性)
2. Consistency (一致性) 结果上
3. Isolation (隔离性) 并发访问
4. Durability (持久性)

*** 事务的状态

- 活动状态 (active)
- 部分提交状态 (partially committed)
- 失败/中止/提交 (failed/abort/commit)

*** SQLServer 中的事务

首先，默认情况下，SQLServer 中每条语句都会被自动提交。
也就是，任何语句都是一个单独事务，不需要加 commit:
#+begin_src sql
  insert into x values ('xxx');
  -- 这里不需要加 commit 就能插入成功
#+end_src

但是，上述行为存在非常严重的安全隐患，建议关掉。
然后，需要手动使用 commit/rollback 进行事务的终结:
#+begin_src sql
  -- 关闭自动提交
  set implicit_transactions off;

  -- 因此，所有的语句都会在同一个事务中
  insert into x values ('aaa');
  insert into x values ('zzz');

  -- 除非你调用了 commit/rollback 否则上述的语句都不会真正入库
  commit/rollback;
#+end_src

另外，如果你想更精细控制事务的范围，可以使用显式的 begin 语句:
#+begin_src sql
  begin transaction
    insert into x values ('222');
    insert into x values ('212', 2);
    insert into x values ('232');
  commit transaction;
#+end_src

* MySQL 中的 SQL 语句
** create

** 分页
